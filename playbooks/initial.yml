########################################################
# Automate Initial Server Setup of Ubuntu 20.04 Servers
########################################################
# This playbook contains 2 plays.

##### Play 1:
# Tasks in this play will be run against servers specified in `/etc/ansible/hosts` file 
# and will call variables defined in 
# the `var/default.yml` file. The value of the **hosts** keyword should be the same as the 
# group name of hosts defined in the `/etc/ansible/hosts` file.
- name: Initial server setup tasks
  hosts: all
  remote_user: root
  vars_files:
    - vars/default.yml

  tasks:
# Task 1: 
# This task updates the package database, the equivalent of the
# following command: `sudo apt update`.
    - name: update cache
      ansible.builtin.apt:
        update_cache: yes

# Task 2: 
# This task upgrades all installed packages, the equivalent of the
# following command: `sudo apt upgrade -y`.
    - name: Update all installed packages
      ansible.builtin.apt:
        name: "*"
        state: latest

# Task 3: 
# This task ensures that the NTP daemon is running. This is especially
# important when you want to make sure that the hosts that will power
# your distributed application are in sync - time-wise.
    - name: Make sure NTP service is running
      ansible.builtin.systemd:
        state: started
        name: systemd-timesyncd

# Task 4: 
# This task verifies that a sudo group exists on the hosts. We know this 
# is true for Ubuntu servers, but it doesn't hurt to check.
    - name: Make sure we have a 'sudo' group
      ansible.builtin.group:
        name: sudo
        state: present

# Task 5: 
# This task creates the user specified in the `var/defaults.yml` file.
    - name: Create a user with sudo privileges
      ansible.builtin.user:
        name: "{{ create_user }}"
        state: present
        groups: sudo
        append: true
        create_home: true
        shell: /bin/bash

# Task 6: 
# This task copies the public SSH key over to the user's home directory.
# This performs the same task as the `ssh-copy-id` command.
    - name: Set authorized key for remote user
      ansible.posix.authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

# Task 7: 
# Here we look for a line that starts with the regexp in the SSH daemon's
# configuration file and change its value to "no". We do this so that
# any attempt to log in using the root account after running this playbook
# will fail. 
    - name: Disable remote login for root
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^PermitRootLogin yes'
        line: 'PermitRootLogin no'

# Task 8: 
# Here we look for a line that starts with the regexp in the SSH daemon's
# configuration file and change its value to a higher port number that's not in use by another application.
# We do this to reduce the number of automated attacks hitting the SSH server, thereby improving it's security posture. 
    - name: Change the SSH port
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#Port 22'
        line: 'Port "{{ ssh_port }}"'

# Task 9: 
# This task will configure the UFW firewall application to allow SSH traffic in via the port
# configured in task 9 above.
    - name: UFW - Allow SSH connections
      community.general.ufw:
        rule: allow
        port: "{{ ssh_port }}"

# Task 10:
# This task will then deny all other traffic access to the hosts and enable UFW.
    - name: Brute-force attempt protection for SSH
      community.general.ufw:
        rule: limit
        port: "{{ ssh_port }}"
        proto: tcp

# Task 11: 
# This task will then deny all other traffic access to the hosts and enable UFW.
    - name: UFW - Deny other incoming traffic and enable UFW
      community.general.ufw:
        state: enabled
        policy: deny
        direction: incoming

# Task 12: 
# This tasks removes package dependencies that are no longer required, the
# equivalent of running the `sudo apt autoremove` command.
    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

# Task 13: 
# Since the SSH daemon's configuration file was modified, this task will apply
# the change by reloading the daemon, ensuring that any attempt to log in using
# the root account will fail.
    - name: Restart the SSH daemon
      ansible.builtin.systemd:
        state: restarted
        name: ssh

##### Play 2:
# This play starts after the last task in play 1 has completed successfully.
- name: Rebooting hosts after initial setup
  hosts: all
  port: "{{ ssh_port }}"
  remote_user: "{{ create_user }}"
  become: true
  vars_files:
    - vars/default.yml

  tasks:
# Task 14:
# This task will reboot all the hosts. You want to do this during an initial 
# server setup and after running the main playbook so that any updates to the
# kernel or a library will take effect before you start installing your application(s).
    - name: Reboot all hosts
      ansible.builtin.reboot:

